코틀린

1. 함수
함수 앞에 항상 fun 이 붙는다.
변수 : 타입 (대문자 시작)
함수 : 리턴타입
이런 식으로 다르다. 콜론도 안 쓰는듯.

2. val vs var
val : 상수
var : 변수

3. String Template
${String}
C의 %s 와 비슷.
단, 대괄호 써줘야함

($문자 쓰고 싶으면 \$로 쓴다)


3. 조건식
다른 언어와 같다 다만 삼항 연산자 없다.
함수(인자) : 리턴값 = a else b 이런 식으로 사용 가능.

또한 스위치 대신
when 을 쓰는 듯.
이를 변수 선언에도 활용 가능하다.
또한 when 에서 in 90..100 이렇게 범위 가능하다.

4. expression vs statement
뭔가 해서 값을 내놓으면 expression
값이 아닌 실행을 하도록 지시한다면 statement
코틀린의 모든 함수는 expression.
void 가 없다 void 처럼 쓰이는 Unit 또한 Unit을 반환한다.


5.array and list
array : 정해진 사이즈, 기본적으로 뮤터블
list
인터페이스이다. 겟으로 값을 가져오는건 가능하지만 값 변경은 불가능하다.
단, 뮤터블리스트는 명령어로 값 변경 가능.
1. list
2. mutable list : arraylist 등


6. for , while
for( 변수 in 횟수(리스트 or  1..10 등)
** 1..10 step n
** 10 downTo 1
** 1 until 100 > 1~99 100번

while 은 다른 언어와 같음.

7. nonnull nullable
npe : null pointer exception
뒤에 ? 붙이면 null이 될 수 있다.
ex,name : String?

?: 엘비스 프레슬리 연산자
null 일 경우 no ~~ 를 반환

!! = null 이 아니다

~~?.let{} ~~가 null 이 아니면 let 한다.


8. class
자바와 다른점 : 파일이름이랑 클래스랑
이름 달라도 된다.
여러 클래스 만들어도 된다.
또 클래스 선언할 때 new 안붙여도 된다.
생성자가 다르다

자바 : 따로 만들어줘야함
코틀린 : 기본 생성자는 클래스 이름 옆 constructor 선언으로 생성 가능.

val name : String = "A"
위와 같이디폴트 값 선언 가능
코드블럭을 생성하고 싶다면

클래스 안에 init 을 만들어서
주 생성자가 만들어질 때 같이 만들어짐.

주 생성자 말고도 부 생성자 만들 수 있다.
클래스 안에 constructor 선언 가능
단 부 생성자는 주 생성자의 위임을 받아야 한다.

클래스 상속 (하나만 가능)
extend 대신 클래스 : 오픈된 클래스 쓴다.
오버라이드 : fun 앞에 open 붙여서 가능하다.
super 또한 사용 가능.


=====================================

중요

1. 람다
lamda
value 처럼 다룰 수 있는 익명 함수이다.
1) 메소드의 파라미터로 넘겨줄수가 있다.
2) 리턴도 할 수 있다.

정의 : 
val/var lamdaName : Type = {arglist -> codeby}


확장 함수
람다함수로 a.function() 으로 해당 변수나 함수? 에 확장 가능
this 함수 파라미터 = 디스 와  it = 람다함수에서 하나만 쓰인 경우


람다의 리턴
람다는 마지막 한줄이 리턴을 의미한다.
리턴이 존재해야 함.

람다 표현 방법 4가지.
함수의 파라미터

람다식 
aaa.lamda {onit}






2. data class
포조 클래스?
틀 역할 > 그 배웠는데
아무튼 그게 테이터 클래스
//투스트링, 해시코드, 이퀄스 카피 다 만들어짐
구조체처럼도 쓸 수 있네
데이터클래스가 아니라면 스트링 출력 시 주소값이 나온다.

3. companion
private 선언된 클래스는 외부에서 사용 불가능하나
컴패니언으로 밖에서 사용 가능하게 한다.
자바의 스태틱 역할을 한다.

4. object
싱글톤 패턴.